{"version":3,"sources":["medals/main.cljs"],"mappings":";AASA,4BAAA,5BAAMA,gEAAeC,MAAMC;AAA3B,AAAA,2BAAA,mFAAA,iDAAA,2CAAA,mRAAA,mFAAA,qDAAA,2CAAA,0JAAA,6DAAA,rmBAC6B,CAAA,eAAA,IAAyB,sKAAA,WAAA,/KAAI,AAACC,6CAAED,cAAc,AAAA,gGAAaD,qRACxD,AAAA,2FAAWA;AAF3C,AAE6D,8BAAA,mFAAA,1GAACG,uNAAiD,AAAA,gGAAaH;2BAF5H,2CAAA,oDACSA;;AAGT,6BAAA,qCAAAI,lEAAMI;AAAN,AAAA,IAAAH,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;cAAAA,VAA8CM;WAA9C,AAAAJ,4CAAAF,eAAA,lEAA8BI;YAA9B,AAAAF,4CAAAF,eAAA,nEAAmCK;AAAnC,AAAA,2BAAA,mFAAA,kDAAA,mFAAA,iDAAA,2CAAA,6DAAA,aAAA,mFAAA,mDAAA,2CAAA,wDAAA,oCAAA,mFAAA,mEAAA,mFAAA,mDAAA,2CAAA,sDAAA,uDAAA,KAAA,yDAAA,KAAA,oKAAA,mFAAA,tmBAIyBA,gPAEED,mLAGA,CAAA,+EAAwCA,wKAG1CA,6BACT,AAACG,4CAAI,WAAKC;AAAL,AAAA,2BAAA,mFAAA,kHAAA,2CAAA,oDAAiBA,hKAAU,AAACN,4CAAII,QAAQE;GAAO,AAACC,+CAAO,WAAKD;AAAL,AAAU,OAACE,0BAAUC,6BAAsBH;qCAbvH,2CAAA,oDACSJ,jIAYoH,AAACQ,eAAKN;;AAGnI,kCAAA,lCAAMO;AAAN,AACE,WAAA,AAAAC,PAAMC,uBAAM,sDAAA,mFAAA,zIAACC;IACPC,YAAU,AAACC,4BAAe,sCAAA,AAAAJ,tCAACK,sDAA0B,sDAAA,mFAAA,zIAACH,uOAAwCD;AADpG,AAAA,0FAAA,mDAAA,2CAAA,wDAAA,2BAAA,mFAAA,iDAAA,sBAAA,mFAAA,uDAAA,2CAAA,wDAAA,uBAAA,mFAAA,uDAAA,mFAAA,kDAAA,mFAAA,iDAAA,2CAAA,6DAAA,qBAQM,AAACR,4CAAI,WAAKZ;AAAL,AAAY,OAACD,0BAAcC,MAAMoB;4BAR5C,mFAAA,iDAAA,2CAAA,2NAAA,mFAAA,qDAAA,2CAAA,6DAAA,npBAQmDK,gQAChC,+HAAA,9HAAK,6GAAA,aAAA,xHAAI,kDAAA,lDAACvB,6CAAEkB;AAT/B,AAU0B,8BAAA,mFAAA,6GAAA,vNAACjB;WAV3B,wCAAA,mFAAA,sDAYK,AAACS,4CAAIJ,2BAAec","names":["medals.main/table-headers","color","selected-sort","cljs.core._EQ_","re-frame.core/dispatch","p__16023","map__16024","cljs.core/--destructure-map","cljs.core.get","medals.main/country-medals","code","index","country","cljs.core.map","key","cljs.core.filter","cljs.core/contains?","medals.constants/sort-values","cljs.core/keys","medals.main/render-medal-widget","cljs.core/deref","sort","re_frame.core.subscribe","countries","medals.utils/sort-countries","medals.utils/get-countries-with-total","medals.constants/colors"],"sourcesContent":["(ns medals.main\n  (:require\n   [medals.constants :as constants]\n   [re-frame.core :as re-frame]\n   [medals.events :as events]\n   [medals.subs :as subs]\n   [medals.utils :refer [get-countries-with-total sort-countries]]))\n\n\n(defn table-headers [color selected-sort]\n  ^{:key color} [:th {:class (str \"medal-colors\" \" \"  (if (= selected-sort (:color_name color)) \"selected\" \"\"))}\n                 [:span {:class (:hex_code color) :on-click #(re-frame/dispatch [::events/change-selected-sort (:color_name color)])}]])\n\n(defn country-medals [{:keys [code index] :as country}]\n  ^{:key code} [:tr\n                [:td {:col-span 10}\n                 [:div {:class \"medal-widget_country-info\"}\n                  [:span index]\n                  [:img {\n                      :alt code \n                      :width 50 \n                      :height 30 \n                      :src (str \"https://countryflagsapi.com/png/\" code)\n                      }\n                  ]\n                  [:span code]]]\n                (map (fn [key] ^{:key key} [:td (get country key)]) (filter (fn [key] (contains? constants/sort-values key)) (keys country)))])\n\n\n(defn render-medal-widget []\n  (let [sort @(re-frame/subscribe [::subs/sort])\n        countries (sort-countries (get-countries-with-total @(re-frame/subscribe [::subs/countries])) sort)]\n    [:div {:class \"medals-container\"}\n    [:h2 \"MEDAL TABLE\"]\n     [:table {:class \"medals-table\"}\n      [:thead\n       [:tr\n        [:th {:col-span \"10\"}]\n        (map (fn [color] (table-headers color sort)) constants/colors)\n        [:th {:class (str (if (= sort :total) \" selected \" \"\") \" cursor-pointer\")}\n         [:span {:on-click #(re-frame/dispatch [::events/change-selected-sort :total])}  \"Total\"]]]]\n      [:tbody\n       (map country-medals countries)]]]))\n\n"]}