{"version":3,"sources":["medals/utils.cljs"],"mappings":";AAGA,+BAAA,uCAAAA,tEAAMI;AAAN,AAAA,IAAAH,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;WAAA,AAAAE,4CAAAF,eAAA,lEAA+BI;aAA/B,AAAAF,4CAAAF,eAAA,pEAAoCK;aAApC,AAAAH,4CAAAF,eAAA,pEAA2CM;AAA3C,AACE,OAACC,+CAAO,WAAKC,MAAMC;AAAX,AACE,QAAGD,QAAMC;GADnB,IAAA,mFAEYL,KAAKC,OAAOC;;AAC1B,8BAAA,9BAAMI,oEAAgBC,UAAUC;AAAhC,AACE,OAACC,6CAAK,WAAKC,SAASC;AAAd,AAAwB,GACE,CAAG,AAACb,4CAAIY,SAASF,WAAS,AAACV,4CAAIa,SAASH;AAD1C;;AAAA,GAEE,CAAG,AAACV,4CAAIY,SAASF,WAAS,AAACV,4CAAIa,SAASH;AAF1C;;AAAA,AAGQ,IAAAI,WAAMJ;IAANI,eAAA,EAAA,CAAAA,oBAAAC,oBAAA,AAAAD,aAAA;AAAA,AAAA,QAAAA;KAAA;AACO,GAAI,CAAG,AAAA,mFAAOF,YAAU,AAAA,mFAAOC;AAA/B;;AAAA;;;;KADP;AAEM,GAAI,CAAI,AAAA,uFAASD,YAAU,AAAA,uFAASC;AAApC;;AAAA;;;;KAFN;AAGQ,GAAI,CAAG,AAAA,mFAAOD,YAAU,AAAA,mFAAOC;AAA/B;;AAAA;;;;KAHR;AAIQ,GAAI,CAAG,AAAA,mFAAOD,YAAU,AAAA,mFAAOC;AAA/B;;AAAA;;;;;AAJR,MAAA,KAAAG,MAAA,CAAA,mEAAAF;;;;;;GAI2DL;;AACnG,wCAAA,xCAAMQ,wFAA0BR;AAAhC,AACE,OAACS,4CAAI,WAAKC;AAAL,AAAc,6DAAA,tDAACC,8CAAMD,+DAAe,AAAClB,6BAAgBkB;GAAWV","names":["p__34789","map__34790","cljs.core/--destructure-map","cljs.core.get","medals.utils/get-total-count","gold","silver","bronze","cljs.core.reduce","total","summation-key","medals.utils/sort-countries","countries","sort-by","cljs.core.sort","countryA","countryB","G__34791","cljs.core/Keyword","js/Error","medals.utils/get-countries-with-total","cljs.core.map","country","cljs.core.assoc"],"sourcesContent":["(ns medals.utils\n  (:require [reagent.core :as r]\n            [medals.constants :refer [COUNTRIESMEDALCOLORS]]))\n(defn get-total-count [{:keys [gold silver bronze]}]\n  (reduce (fn [total summation-key]\n            (+ total summation-key))\n           0 [gold silver bronze]))\n(defn sort-countries [countries,sort-by]\n  (sort (fn [countryA countryB] (cond\n                                  (> (get countryA sort-by) (get countryB sort-by)) -1\n                                  (< (get countryA sort-by) (get countryB sort-by)) 1\n                                  :else (case sort-by\n                                        :total (if (> (:gold countryA) (:gold countryB)) -1 1)\n                                        :gold (if (>  (:silver countryA) (:silver countryB)) -1 1)\n                                        :silver (if (> (:gold countryA) (:gold countryB)) -1 1)\n                                        :bronze (if (> (:gold countryA) (:gold countryB)) -1 1)))) countries))\n(defn get-countries-with-total [countries]\n  (map (fn [country] (assoc country :total (get-total-count country))) countries))"]}