{"version":3,"sources":["medals/utils.cljs"],"mappings":";AAKA,+BAAA,uCAAAA,tEAAMI;AAAN,AAAA,IAAAH,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;WAAA,AAAAE,4CAAAF,eAAA,lEAA+BI;aAA/B,AAAAF,4CAAAF,eAAA,pEAAoCK;aAApC,AAAAH,4CAAAF,eAAA,pEAA2CM;AAA3C,AACE,OAACC,+CAAO,WAAKC,MAAMC;AAAX,AACE,QAAGD,QAAMC;GADnB,IAAA,mFAEYL,KAAKC,OAAOC;;AAG1B,8BAAA,9BAAMI,oEAAgBC,UAAUC;AAAhC,AACE,OAACC,6CAAK,WAAKC,UAAUC;AAAf,AAA0B,GACA,CAAG,AAACb,4CAAIY,UAAUF,WAAS,AAACV,4CAAIa,UAAUH;AAD1C;;AAAA,GAEA,CAAG,AAACV,4CAAIY,UAAUF,WAAS,AAACV,4CAAIa,UAAUH;AAF1C;;AAAA,AAGM,IAAAI,WAAMJ;IAANI,eAAA,EAAA,CAAAA,oBAAAC,oBAAA,AAAAD,aAAA;AAAA,AAAA,QAAAA;KAAA;AACS,GAAI,CAAG,AAAA,mFAAOF,aAAW,AAAA,mFAAOC;AAAhC;;AAAA;;;;KADT;AAEQ,GAAI,CAAI,AAAA,uFAASD,aAAW,AAAA,uFAASC;AAArC;;AAAA;;;;KAFR;AAGU,GAAI,CAAG,AAAA,mFAAOD,aAAW,AAAA,mFAAOC;AAAhC;;AAAA;;;;KAHV;AAIU,GAAI,CAAG,AAAA,mFAAOD,aAAW,AAAA,mFAAOC;AAAhC;;AAAA;;;;;AAJV,MAAA,KAAAG,MAAA,CAAA,mEAAAF;;;;;;GAI+DL;;AAEvG,wCAAA,xCAAMQ,wFAA0BR;AAAhC,AACE,OAACS,4CAAI,WAAKC;AAAL,AAAc,6DAAA,tDAACC,8CAAMD,+DAAe,AAAClB,6BAAgBkB;GAAWV","names":["p__15783","map__15784","cljs.core/--destructure-map","cljs.core.get","medals.utils/get-total-count","gold","silver","bronze","cljs.core.reduce","total","summation-key","medals.utils/sort-countries","countries","sort-by","cljs.core.sort","country-a","country-b","G__15785","cljs.core/Keyword","js/Error","medals.utils/get-countries-with-total","cljs.core.map","country","cljs.core.assoc"],"sourcesContent":["(ns medals.utils\n  (:require [reagent.core :as r]\n            [medals.constants :as default-colors]))\n\n\n(defn get-total-count [{:keys [gold silver bronze]}]\n  (reduce (fn [total summation-key]\n            (+ total summation-key))\n           0 [gold silver bronze]))\n\n\n(defn sort-countries [countries,sort-by]\n  (sort (fn [country-a country-b] (cond\n                                  (> (get country-a sort-by) (get country-b sort-by)) -1\n                                  (< (get country-a sort-by) (get country-b sort-by)) 1\n                                  :else (case sort-by\n                                          :total (if (> (:gold country-a) (:gold country-b)) -1 1)\n                                          :gold (if (>  (:silver country-a) (:silver country-b)) -1 1)\n                                          :silver (if (> (:gold country-a) (:gold country-b)) -1 1)\n                                          :bronze (if (> (:gold country-a) (:gold country-b)) -1 1)))) countries))\n\n(defn get-countries-with-total [countries]\n  (map (fn [country] (assoc country :total (get-total-count country))) countries))"]}